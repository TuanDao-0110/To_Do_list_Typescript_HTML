/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/

const todoForm = document.querySelector("#todo_form");
const doneList = document.querySelector(".finished");
const todoList = document.querySelector(".list");
const cards = [];
const handleTodoFormSubmit = (event) => {
    event.preventDefault();
    const form = event.target;
    for (const input of form.elements) {
        if (input.value) {
            const todo = { name: input.value, done: false };
            addCard(todo);
            input.value = "";
        }
    }
};
const handleTodoListClick = (event) => {
    const target = event.target;
    const cardElement = target.closest(".card");
    const card = cards.find((c) => c.element === cardElement);
    if (!card)
        return;
    if (target.matches(".toDo")) {
        deleteCard(card);
    }
    else if (target.matches(".done")) {
        toggleCardDone(card);
    }
};
const addCard = (todo) => {
    const index = cards.length + Math.random() * 10000;
    const id = `card_${index + Math.random() * 10000}`;
    const element = document.createElement("form");
    element.className = "card";
    element.id = id;
    element.innerHTML = `
    <p><span class="title">${todo.name}</span></p>
    <input type="checkbox" id="done_${index}" name="done_${index}" class="done" ${todo.done ? "checked" : ""} />
    <label for="done_${index}"><i class="fa check fa-check"></i></label>
    <input type="checkbox" id="trash_${index}" name="trash_${index}" class="toDo" />
    <label for="trash_${index}"><i class="fa trash fa-trash-alt"></i></label>
  `;
    todoList.appendChild(element);
    const card = { id, todo, element };
    cards.push(card);
};
const deleteCard = (card) => {
    card.element.remove();
    cards.splice(cards.indexOf(card), 1);
};
const toggleCardDone = (card) => {
    const doneInput = card.element.querySelector(".done");
    if (!doneInput)
        return;
    if (doneInput.checked) {
        card.element.classList.add("done__card");
    }
    else {
        card.element.classList.remove("done__card");
    }
    card.todo.done = doneInput.checked;
};
const render = () => { };
todoForm.addEventListener("submit", handleTodoFormSubmit);
todoList.addEventListener("click", handleTodoListClick);

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQU0sRUFBRSxDQUFDO0lBQ3RCLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN2QyxDQUFDLENBQUM7QUFFRixNQUFNLGNBQWMsR0FBRyxDQUFDLElBQVUsRUFBRSxFQUFFO0lBQ3BDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBcUIsQ0FBQztJQUMxRSxJQUFJLENBQUMsU0FBUztRQUFFLE9BQU87SUFDdkIsSUFBSSxTQUFTLENBQUMsT0FBTyxFQUFFO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUMxQztTQUFNO1FBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQzdDO0lBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQztBQUNyQyxDQUFDLENBQUM7QUFFRixNQUFNLE1BQU0sR0FBRyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7QUFFeEIsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQzFELFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RvdG9fYXBwLy4vc3JjL2FwcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEZWZpbmUgdGhlIHR5cGVzIGFuZCBpbnRlcmZhY2VzXG5pbnRlcmZhY2UgVG9kbyB7XG4gIG5hbWU6IHN0cmluZztcbiAgZG9uZTogYm9vbGVhbjtcbn1cblxudHlwZSBDYXJkID0ge1xuICBpZDogc3RyaW5nO1xuICB0b2RvOiBUb2RvO1xuICBlbGVtZW50OiBIVE1MRWxlbWVudDtcbn07XG5cbmNvbnN0IHRvZG9Gb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0b2RvX2Zvcm1cIikgYXMgSFRNTEZvcm1FbGVtZW50O1xuY29uc3QgZG9uZUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZpbmlzaGVkXCIpIGFzIEhUTUxEaXZFbGVtZW50O1xuY29uc3QgdG9kb0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmxpc3RcIikgYXMgSFRNTERpdkVsZW1lbnQ7XG5jb25zdCBjYXJkczogQ2FyZFtdID0gW107XG5cbmNvbnN0IGhhbmRsZVRvZG9Gb3JtU3VibWl0ID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBjb25zdCBmb3JtID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxGb3JtRWxlbWVudDtcbiAgZm9yIChjb25zdCBpbnB1dCBvZiBmb3JtLmVsZW1lbnRzIGFzIHVua25vd24gYXMgSFRNTElucHV0RWxlbWVudFtdKSB7XG4gICAgaWYgKGlucHV0LnZhbHVlKSB7XG4gICAgICBjb25zdCB0b2RvOiBUb2RvID0geyBuYW1lOiBpbnB1dC52YWx1ZSwgZG9uZTogZmFsc2UgfTtcbiAgICAgIGFkZENhcmQodG9kbyk7XG4gICAgICBpbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBoYW5kbGVUb2RvTGlzdENsaWNrID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgY29uc3QgY2FyZEVsZW1lbnQgPSB0YXJnZXQuY2xvc2VzdChcIi5jYXJkXCIpIGFzIEhUTUxFbGVtZW50O1xuICBjb25zdCBjYXJkID0gY2FyZHMuZmluZCgoYykgPT4gYy5lbGVtZW50ID09PSBjYXJkRWxlbWVudCk7XG4gIGlmICghY2FyZCkgcmV0dXJuO1xuXG4gIGlmICh0YXJnZXQubWF0Y2hlcyhcIi50b0RvXCIpKSB7XG4gICAgZGVsZXRlQ2FyZChjYXJkKTtcbiAgfSBlbHNlIGlmICh0YXJnZXQubWF0Y2hlcyhcIi5kb25lXCIpKSB7XG4gICAgdG9nZ2xlQ2FyZERvbmUoY2FyZCk7XG4gIH1cbn07XG5cbmNvbnN0IGFkZENhcmQgPSAodG9kbzogVG9kbykgPT4ge1xuICBjb25zdCBpbmRleCA9IGNhcmRzLmxlbmd0aCArIE1hdGgucmFuZG9tKCkgKiAxMDAwMFxuICBjb25zdCBpZCA9IGBjYXJkXyR7aW5kZXggKyBNYXRoLnJhbmRvbSgpICogMTAwMDB9YDtcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xuICBlbGVtZW50LmNsYXNzTmFtZSA9IFwiY2FyZFwiO1xuICBlbGVtZW50LmlkID0gaWQ7XG4gIGVsZW1lbnQuaW5uZXJIVE1MID0gYFxuICAgIDxwPjxzcGFuIGNsYXNzPVwidGl0bGVcIj4ke3RvZG8ubmFtZX08L3NwYW4+PC9wPlxuICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cImRvbmVfJHtpbmRleH1cIiBuYW1lPVwiZG9uZV8ke2luZGV4fVwiIGNsYXNzPVwiZG9uZVwiICR7dG9kby5kb25lID8gXCJjaGVja2VkXCIgOiBcIlwifSAvPlxuICAgIDxsYWJlbCBmb3I9XCJkb25lXyR7aW5kZXh9XCI+PGkgY2xhc3M9XCJmYSBjaGVjayBmYS1jaGVja1wiPjwvaT48L2xhYmVsPlxuICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cInRyYXNoXyR7aW5kZXh9XCIgbmFtZT1cInRyYXNoXyR7aW5kZXh9XCIgY2xhc3M9XCJ0b0RvXCIgLz5cbiAgICA8bGFiZWwgZm9yPVwidHJhc2hfJHtpbmRleH1cIj48aSBjbGFzcz1cImZhIHRyYXNoIGZhLXRyYXNoLWFsdFwiPjwvaT48L2xhYmVsPlxuICBgO1xuICB0b2RvTGlzdC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgY29uc3QgY2FyZDogQ2FyZCA9IHsgaWQsIHRvZG8sIGVsZW1lbnQgfTtcbiAgY2FyZHMucHVzaChjYXJkKTtcbn07XG5cbmNvbnN0IGRlbGV0ZUNhcmQgPSAoY2FyZDogQ2FyZCkgPT4ge1xuICBjYXJkLmVsZW1lbnQucmVtb3ZlKCk7XG4gIGNhcmRzLnNwbGljZShjYXJkcy5pbmRleE9mKGNhcmQpLCAxKTtcbn07XG5cbmNvbnN0IHRvZ2dsZUNhcmREb25lID0gKGNhcmQ6IENhcmQpID0+IHtcbiAgY29uc3QgZG9uZUlucHV0ID0gY2FyZC5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZG9uZVwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICBpZiAoIWRvbmVJbnB1dCkgcmV0dXJuO1xuICBpZiAoZG9uZUlucHV0LmNoZWNrZWQpIHtcbiAgICBjYXJkLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRvbmVfX2NhcmRcIik7XG4gIH0gZWxzZSB7XG4gICAgY2FyZC5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkb25lX19jYXJkXCIpO1xuICB9XG4gIGNhcmQudG9kby5kb25lID0gZG9uZUlucHV0LmNoZWNrZWQ7XG59O1xuXG5jb25zdCByZW5kZXIgPSAoKSA9PiB7fTtcblxudG9kb0Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBoYW5kbGVUb2RvRm9ybVN1Ym1pdCk7XG50b2RvTGlzdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlVG9kb0xpc3RDbGljayk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=